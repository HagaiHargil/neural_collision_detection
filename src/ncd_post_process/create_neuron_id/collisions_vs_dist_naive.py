"""
Aggregation of tools to analyze the graphs generated by
'graph_parsing.py'.
"""
import pathlib

import networkx as nx
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats

from ncd_post_process.graph_parsing import CollisionNode


def graph_file_to_graph_object(fname: pathlib.Path) -> nx.Graph:
    """
    Deserializes a saved graph into a graph object
    """
    try:
        graph = nx.readwrite.gml.read_gml(
            str(fname), label=None, destringizer=CollisionNode.from_str
        )
    except FileNotFoundError:
        raise
    else:
        return graph


def collisions_as_func_of_topo_dist(g: nx.Graph, neuron: str):
    """
    Traverse a specific graph and find the number of
    collisions in it as a function of the topological distance
    from the cell body.
    """
    num_of_nodes = g.number_of_nodes()
    collisions_ax = np.zeros(num_of_nodes, dtype=np.uint64)
    collisions_dend = collisions_ax.copy()
    distance_ax = np.zeros(num_of_nodes, dtype=np.float64)
    distance_dend = distance_ax.copy()
    idx_axon, idx_dend = 0, 0
    for nodeint in g.nodes():
        node = g.nodes[nodeint]["label"]
        if node.tree_type == "Axon":
            collisions_ax[idx_axon] = node.collisions
            distance_ax[idx_axon] = node.dist_to_body
            idx_axon += 1
        else:
            collisions_dend[idx_dend] = node.collisions
            distance_dend[idx_dend] = node.dist_to_body
            idx_dend += 1

    collisions_ax = collisions_ax[:idx_axon]
    collisions_dend = collisions_dend[:idx_dend]
    distance_ax = distance_ax[:idx_axon]
    distance_dend = distance_dend[:idx_dend]
    return collisions_ax, collisions_dend, distance_ax, distance_dend


def histogram_collisions(data, span):
    """Create a histogram with the counts of the collisions
    inside bins defined by the span limits.
    """
    bins = np.linspace(span[0], span[1], 1000)
    coll_idx = np.digitize(data, bins)
    return coll_idx


def plot_reg(collisions_ax, collisions_dend, distance_ax, distance_dend, neuron_name):
    data_df_dend = pd.DataFrame(
        {
            "Length of branch [um]": distance_dend,
            "P(collision)": collisions_dend / 100_000,
        }
    )
    data_df_axon = pd.DataFrame(
        {"Length of branch [um]": distance_ax, "P(collision)": collisions_ax / 100_000}
    )
    plt.rcParams.update({"font.size": 22})
    ax = sns.jointplot(
        "Length of branch [um]",
        "P(collision)",
        data=data_df_axon,
        kind="hex",
        height=8,
        space=0,
        color="C2",
    )
    plt.subplots_adjust(left=0.11)
    dend = sns.jointplot(
        "Length of branch [um]",
        "P(collision)",
        data=data_df_dend,
        kind="hex",
        height=8,
        color="C1",
    )
    plt.subplots_adjust(left=0.11)
    ax.savefig(
        f"results/for_article/fig2/{neuron_name}_colls_vs_dist_axon.pdf",
        transparent=True,
        dpi=300,
    )
    dend.savefig(
        f"results/for_article/fig2/{neuron_name}_colls_vs_dist_dend.pdf",
        transparent=True,
        dpi=300,
    )


if __name__ == "__main__":
    neuron_names = [
        # "AP120410_s1c1",
        # "AP120410_s3c1",
        # "AP120412_s3c2",
        # "AP120416_s3c1",
        # "AP120419_s1c1",
        "AP120420_s1c1",
        # "AP120420_s2c1",
        # "AP120507_s3c1",
        # "AP120510_s1c1",
        # "AP120522_s3c1",
        # "AP120524_s2c1",
        # "AP120614_s1c2",
        "AP130312_s1c1",
        # "AP131105_s1c1",
    ]
    # fig, ax = plt.subplots(2, 2)
    # fig.suptitle('Collisions as a function of topological distance from soma\nAxon collisions in blue, dendritic in orange')
    # for neuron, axx in zip(neuron_names, ax.flatten()):
    for neuron in neuron_names:
        graph_fname = (
            pathlib.Path("/data/neural_collision_detection/results/2019_2_10")
            / f"graph_{neuron}_with_collisions.gml"
        )
        try:
            graph = graph_file_to_graph_object(graph_fname)
        except FileNotFoundError:
            continue
        # fig, axx = plt.subplots()
        coll_ax, coll_dend, dist_ax, dist_dend = collisions_as_func_of_topo_dist(
            graph, neuron
        )
        plot_reg(coll_ax, coll_dend, dist_ax, dist_dend, neuron)
        # fig.savefig(graph_fname.with_name(f'colls_dist_{neuron}.pdf'), transparent=True, dpi=300)
    # fig.tight_layout()
    plt.show(block=False)
