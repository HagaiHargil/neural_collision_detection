"""
Aggregation of tools to analyze the graphs generated by
'graph_parsing.py'.
"""
import pathlib

import networkx as nx
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from graph_parsing import CollisionNode


def graph_file_to_graph_object(fname: pathlib.Path):
    """
    Deserializes a saved graph into a graph object
    """
    graph = nx.readwrite.gml.read_gml(str(fname), label=None, destringizer=CollisionNode.from_str)
    return graph


def collisions_as_func_of_topo_dist(g: nx.Graph, neuron: str, ax=None):
    """
    Traverse a specific graph and find scatter the number of
    collisions in it as a function of the topological distance
    from the cell body.
    """
    num_of_nodes = g.number_of_nodes()
    collisions_ax = np.zeros(num_of_nodes, dtype=np.uint64)
    collisions_dend = collisions_ax.copy()
    distance_ax = np.zeros(num_of_nodes, dtype=np.float64)
    distance_dend = distance_ax.copy()
    idx_axon, idx_dend = 0, 0
    for node in g.nodes():
        if node.tree_type == 'Axon':
            collisions_ax[idx_axon] = node.collisions
            distance_ax[idx_axon] = node.dist_to_body
            idx_axon += 1
        else:
            collisions_dend[idx_dend] = node.collisions
            distance_dend[idx_dend] = node.dist_to_body
            idx_dend += 1

    if not ax:
        _, ax = plt.subplots()
    ax.scatter(distance_ax, collisions_ax, s=0.3, c='C0', alpha=0.3)
    ax.set_title(f'{neuron}')
    ax.set_xlabel('Distance [um]')
    ax.set_ylabel('Collisions [counts]')
    ax.scatter(distance_dend, collisions_dend, s=0.3, c='C1', alpha=0.3)


if __name__ == "__main__":
    neuron_names = [
        "AP120410_s1c1",
        "AP120410_s3c1",
        "AP120412_s3c2",
        "AP120416_s3c1",
        "AP120419_s1c1",
        "AP120420_s1c1",
        "AP120420_s2c1",
        "AP120507_s3c1",
        "AP120510_s1c1",
        # "AP120522_s3c1",
        # "AP120524_s2c1",
        # "AP120614_s1c2",
        # "AP130312_s1c1",
        # "AP131105_s1c1",
    ]
    fig, ax = plt.subplots(3, 3)
    fig.suptitle('Collisions as a function of topological distance from soma\nAxon collisions in blue, dendritic in orange')
    for neuron, axx in zip(neuron_names, ax.flatten()):
        graph_fname = pathlib.Path(__file__).resolve().parents[1] / 'results' / '2019_2_10' / f'graph_{neuron}_with_collisions.gml'
        graph = graph_file_to_graph_object(graph_fname)
        collisions_as_func_of_topo_dist(graph, neuron, axx)
    fig.tight_layout()
    plt.show(block=False)
