"""
This scripts attemps to qualititavely assess the "hiddenness" or complexity
of a given neuron. It should be run under Blender after "from mytools import *"
and in Vertex Paint mode. It has large similarities to "draw_collisions_on_tree"
and to some of the functions supplied by py3DN.
"""
import sys
from importlib import reload

import numpy as np
import pandas as pd
import attr
from attr.validators import instance_of

from mytools import *
import bpy

sys.path.append('/mnt/qnap/simulated_morph_data/neural_collision_detection/scripts/blender')
import general_methods


@attr.s
class VisualizeHiddenness:
    """
    Draws on a loaded Blender neuron the hiddenness of each part of it.
    Uses data generated by the "find_branching_density" script.

    Parameters:
    :param pd.DataFrame density_df: A DataFrame, with its number of rows being the
    number of points that make up the neuron (in XML\Blender format), and its columns
        being the radii of the spheres that encircled each point when counting the number
        of branches of that point. The index is composed of the name of the
        tree this point is a part of, and by the coordinate of that specific
        point in Euclidean space.
    :param int radius: The specific radius of the encircling sphere we're
    currently visualizing in Blender.
    """
    density_df = attr.ib(validator=instance_of(pd.DataFrame))
    radius = attr.ib(validator=instance_of(int))
    total_points = attr.ib(init=False)

    def __attrs_post_init__(self):
        assert neuron[0]
        self.total_points = self.density_df.shape[0]

    def run(self):
        """ Start pipeline """
        colorcodes = general_methods.generate_color_codes(self.density_df.values)
        limits = general_methods.TreeLimits.from_hiddenness_df(self.density_df)
        general_methods.redraw_trees(colorcodes, limits)


if __name__ == "__main__":
    df_fname = '/mnt/qnap/Hagai/density.csv'
    df = pd.read_csv(df_fname, index_col=['num', 'tree', 'x', 'y', 'z'])
    radius = int(df.columns[9])  # columns[0] corresponds to a radius of 1 um,
    # columns[9] is 10 um.
    general_methods = reload(general_methods)  # helps Blender
    vizhid = VisualizeHiddenness(df[[str(radius)]], radius)
    vizhid.run()