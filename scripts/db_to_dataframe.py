import xarray as xr
import pandas as pd
import numpy as np


def read_db_into_raw_df(fname) -> pd.DataFrame:
    """ 
    Basic functionality to read the current
    DB format into an unprocessed DataFrame.
    """
    column_names = ['run_id', 'neuron', 'vasc', 'location', 'rotation', 'collisions']
    dtypes = {column_names[0]: 'category', column_names[1]: 'category', 
              column_names[2]: 'category', column_names[3]: str, column_names[4]: str,
              column_names[5]: str}
    df = pd.read_csv(fname, header=None, names=column_names, 
                     index_col=column_names[:3], dtype=dtypes)
    return df


def parse_raw_df(df) -> pd.DataFrame:
    """ 
    Interprets the raw DF generated by "read_db_into_raw_df" into a 
    MultiIndex DataFrame, each value being an x-y-z coordinate of
    a collision.
    """

    # Parse "location" into three (x, y, z) columns
    
    locs = df.location\
        .str.split(' ', expand=True)\
        .rename(columns={0: 'x', 1: 'y', 2: 'z'})\
        .astype(np.float64)
    df[['x', 'y', 'z']] = locs
    df = df.drop('location', axis=1)
    
    # Parse "rotation" into three (roll, yaw, pitch) columns
    rots = df.rotation\
        .str.split(' ', expand=True)\
        .rename(columns={0: 'roll', 1: 'yaw', 2: 'pitch'})\
        .astype(np.float64)

    df[['roll', 'yaw', 'pitch']] = rots
    df = df.drop('rotation', axis=1)
    index_cols = list(set(df.columns) - set(['collisions']))
    ordered_index_cols = ['x', 'y', 'z', 'roll', 'pitch', 'yaw']
    assert set(ordered_index_cols) == set(index_cols)
    df.set_index(ordered_index_cols, inplace=True, append=True)

    # Parse collision coordinates into a new DataFrame, x-y-z as columns and the neuron name
    # as a categorical index
    print("Parsing collisions...")
    cols_list = []
    for idx, data in df.collisions.items():
        try:
            split = data.replace('|', ' ').split(' ')
        except AttributeError:  # no collisions
            arr = np.array([[np.nan, np.nan, np.nan]], dtype=np.float64)
        else:
            assert len(split) % 3 == 0  # x-y-z coords
            arr = np.array(split, dtype=np.float64).reshape((-1, 3))
        index_dict = {k: v for k, v in zip(df.index.names, idx)}
        new_df = pd.DataFrame({'coll_x': arr[:, 0], 'coll_y': arr[:, 1], 'coll_z': arr[:, 2],
                               **index_dict})
        cols_list.append(new_df)

    collisions = pd.concat(cols_list)
    
    for col_name in ['run_id', 'neuron', 'vasc']:
        collisions[col_name] = collisions[col_name].astype('category')
    collisions = collisions.set_index(df.index.names)

    return collisions


def get_stats(df: pd.DataFrame):
    rows = np.linspace(10000, 25000, 10, dtype=np.uint64)                
    collisions_df = df.iloc[rows, :]
    chosen_pos = np.array([collisions_df.index.get_level_values('x'),
                           collisions_df.index.get_level_values('y'),
                           collisions_df.index.get_level_values('z')]).T
    
    idx = pd.IndexSlice
    relevant_collisions = df.loc[idx[:, :, :, chosen_pos[:, 0], 
                                     chosen_pos[:, 1], chosen_pos[:, 2], :, :, :], 
                                 :]
                                 

if __name__ == '__main__':
    fname = r'/data/simulated_morph_data/results/2018_11_26/gatherer.csv'
    raw_df = read_db_into_raw_df(fname)
    cols = parse_raw_df(raw_df)
    # print(cols.head())
    # cols.to_hdf(fname[:-4] + '_parsed.h5', key='70_2', mode='w')
    get_stats(cols)
