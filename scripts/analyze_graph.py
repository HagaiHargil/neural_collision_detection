"""
Aggregation of tools to analyze the graphs generated by
'graph_parsing.py'.
"""
import pathlib

import networkx as nx
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from graph_parsing import CollisionNode


def graph_file_to_graph_object(fname: pathlib.Path):
    """
    Deserializes a saved graph into a graph object
    """
    graph = nx.readwrite.gml.read_gml(str(fname), label=None, destringizer=CollisionNode.from_str)
    return graph


def collisions_as_func_of_topo_dist(g: nx.Graph, neuron: str):
    """
    Traverse a specific graph and find scatter the number of
    collisions in it as a function of the topological distance
    from the cell body.
    """
    num_of_nodes = g.number_of_nodes()
    collisions = np.zeros(num_of_nodes, dtype=np.uint64)
    distance = np.zeros(num_of_nodes, dtype=np.float64)
    for idx, node in enumerate(g.nodes()):
        collisions[idx] = node.collisions
        distance[idx] = node.dist_to_body

    fig, ax = plt.subplots()
    ax.scatter(distance, collisions)
    ax.set_title('Collisions as a function of topological distance from soma')


if __name__ == "__main__":
    neuron = 'AP120416_s3c1'
    graph_fname = pathlib.Path(__file__).resolve().parents[2] / 'results' / '2019_2_10' / f'graph_{neuron}_with_collisions.gexf'
    graph = graph_file_to_graph_object(graph_fname)
    collisions_as_func_of_topo_dist(graph, neuron)
    plt.show()
