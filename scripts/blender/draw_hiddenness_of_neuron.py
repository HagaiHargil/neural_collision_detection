"""
This scripts attemps to qualititavely assess the "hiddenness" or complexity
of a given neuron. It should be run under Blender after "from mytools import *"
and in Vertex Paint mode. It has large similaritiess to "draw_collisions_on_tree"
and to some of the functions supplied by py3DN.
"""

import numpy as np
import pandas as pd
import attr
from attr.validators import instance_of

sys.path.append('/mnt/qnap/simulated_morph_data/neural_collision_detection/scripts/blender')
from general_methods import name_neuron_trees, generate_color_codes


@attr.s
class VisualizeHiddenness:
    """
    Draws on a loaded Blender neuron the hiddenness of each part of it.
    Uses data generated by the "find_branching_density" script.

    Parameters:
    :param np.ndarray num_branch: A numpy array, with its number of rows being the
    number of points that make up the neuron (in XML\Blender format), and its columns
        being the radii of the spheres that encircled each point when counting the number
        of branches of that point.
    """
    num_branch = attr.ib(validator=instance_of(np.ndarray))
    total_points = attr.ib(init=False)



    def __attrs_post_init__(self):
        assert neuron[0]
        self.total_points = self.num_branch.shape[0]

    def run(self):
        """ Start pipeline """
        tree_names = name_neuron_trees()
        colorcodes = generate_color_codes(self.num_branch)

